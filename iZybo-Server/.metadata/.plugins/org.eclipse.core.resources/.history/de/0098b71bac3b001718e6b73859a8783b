/*
 * iZybo.c

 *
 *  Created on: 09/05/2017
 *      Author: adria.gil
 */

#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "lwip/inet.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include "lwipopts.h"
#include "lwip/opt.h"

#include "config_apps.h"
#ifdef __arm__
#include "xil_printf.h"
#include "FreeRTOS.h"
#include "task.h"
#endif

#define BUFSIZE (100)

static char recv_buf[BUFSIZE];
static char send_buf[BUFSIZE];

int sd_write[12];
int sd_read[12];

u32_t read_port22 = 5001;
u32_t write_port22 = 2222;
u32_t opt;

void application_thread(int *i)
{

}


void iZybo_server_thread()
{
	int sock1 = 0, sock2 = 0, sd1 = 0, sd2 = 0;
	struct sockaddr_in addressR, remoteR, addressW, remoteW;
	int size;

	int nr, nw, i = 0;

//	bzero(recv_buf, BUFSIZE);
//	bzero(send_buf, BUFSIZE);
	memset(recv_buf, '\0', BUFSIZE);
	memset(send_buf, '\0', BUFSIZE);

	if ((sock1 = lwip_socket(AF_INET, SOCK_STREAM, 0)) < 0)
		return;

	addressR.sin_family = AF_INET;
	addressR.sin_port = htons(read_port22);
	addressR.sin_addr.s_addr = INADDR_ANY;

	if (lwip_bind(sock1, (struct sockaddr *)&addressR, sizeof (addressR)) < 0)
		return;

	lwip_listen(sock1, 0);

	xil_printf("Waiting User 2 to connect... reading side\r\n");

	size = sizeof(remoteR);

	while(1) {
		if ((sd_read[i] = lwip_accept(sock1, (struct sockaddr *)&remoteR, (socklen_t *)&size)) > 0) {
			xil_printf("Read socket accepted: %d\r\n", sd1);

			//	Code to Use sock2 as server

			if ((sock2 = lwip_socket(AF_INET, SOCK_STREAM, 0)) < 0)
					return;

			addressW.sin_family = AF_INET;
			addressW.sin_port = htons(write_port22);
			addressW.sin_addr.s_addr = INADDR_ANY;

			if (lwip_bind(sock2, (struct sockaddr *)&addressW, sizeof (addressW)) < 0)
				return;

			lwip_listen(sock2, 0);

			xil_printf("Waiting User 2 to connect... writing side\r\n");

			size = sizeof(remoteW);

			if ((sd_write[i] = lwip_accept(sock2, (struct sockaddr *)&remoteW, (socklen_t *)&size)) > 0) {
				xil_printf("Write socket accepted: %d\r\n", sd2);
				sys_thread_new("servers", application_thread,
					i,
					THREAD_STACKSIZE,
					DEFAULT_THREAD_PRIO);


			} else {
				xil_printf("Error on accept! Number %d\r\n", sd2);
			}
			lwip_read(sd2, recv_buf, BUFSIZE); xil_printf("ACK Read: %s\r\n",recv_buf);

			i++;

		} else {
			xil_printf("Error on accept! Number %d\r\n", sd1);
		}
		lwip_read(sd1, recv_buf, BUFSIZE); xil_printf("ACK Read: %s\r\n",recv_buf);
	}

	xil_printf("Connection Established\r\n");

	memset(recv_buf, '\0', BUFSIZE);
	memset(send_buf, '\0', BUFSIZE);

	while (1) {

		xil_printf("\r\nWaiting message %d", i);
		/* read a max of RECV_BUF_SIZE bytes from socket */
		if ((nr = lwip_read(sd1, recv_buf, BUFSIZE)) <= 0) {
			xil_printf("%s: error reading from socket %d, closing socket\r\n", __FUNCTION__, sd1);
			break;
		}
		/* Print messages */
		if (nr > 0) {
			xil_printf("\r\nUser 2: %s\r\n", recv_buf);
		}

		xil_printf("Now you can send your message\r\n");

		/*Sending message */
		xil_printf("Me: ");
		if(fgets(send_buf, BUFSIZE, stdin) != NULL) {
			if ((nw = lwip_write(sd2, send_buf, BUFSIZE)) < 0) {
				xil_printf("Error sending to socket %d\r\n", sd1);
			}
		}
		else {
			printf("Error fgets!\r\n");
		}

		i++;
		memset(recv_buf, '\0', BUFSIZE);
		memset(send_buf, '\0', BUFSIZE);

	}

	close(sock1);
	close(sock2);
}
