/*
 * iZybo.c

 *
 *  Created on: 09/05/2017
 *      Author: adria.gil
 */

#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "lwip/inet.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include "lwipopts.h"

#include "config_apps.h"
#ifdef __arm__
#include "xil_printf.h"
#include "FreeRTOS.h"
#include "task.h"
#endif

#define BUFSIZE (1440)

static char recv_buf[BUFSIZE];
static char send_buf[BUFSIZE];
static char ack_buf[BUFSIZE] = {"ACK"};

u16_t read_port00 = 5001;
u16_t write_port00 = 2222;


void UDP_application_thread()
{
	int sock1 = 0, sock2 = 0, sd1 = 0, sd2 = 0;
	struct sockaddr_in addressR, remoteW;
	int size;
	struct ip_addr servaddr;

	int nr, nw, i = 1;

	bzero(recv_buf, BUFSIZE);
	bzero(send_buf, BUFSIZE);
	memset(recv_buf, '\0', BUFSIZE);
	memset(send_buf, '\0', BUFSIZE);

	/* Create sock1 as reading server */
	if ((sock1 = lwip_socket(AF_INET, SOCK_DGRAM, 0)) < 0)
		return;
	memset((void*)&addressR, 0, sizeof addressR);
	addressR.sin_family = AF_INET;
	addressR.sin_port = htons(read_port00);
	addressR.sin_addr.s_addr = INADDR_ANY;

	/* Create sock2 as writing client */
	IP4_ADDR(&servaddr, 147, 83, 81, 226);  // Address 6
	if ((sock2 = lwip_socket(AF_INET, SOCK_DGRAM, 0)) < 0)
		return;

	memset((void*)&remoteW, 0, sizeof remoteW);
	remoteW.sin_addr.s_addr = servaddr.addr;
	remoteW.sin_family = AF_INET;
	remoteW.sin_port = htons(write_port00);

	/*Connect to the server*/
	xil_printf("Connecting to 147.83.81.226\r\n");
	while(lwip_connect(sock2, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
		//xil_printf("Connected to server\r\n");
	}
	xil_printf("Connected to server\r\n");

	/* Binding client */
	xil_printf("Connecting to client\r\n");
	if (lwip_bind(sock1, (struct sockaddr *)&addressR, sizeof (addressR)) < 0)
		return;

	xil_printf("Client socket connected\r\n");

//	read(sd1, recv_buf, BUFSIZE); xil_printf("ACK Read: %s\r\n",recv_buf);


//	Code to Use sock2 as server

//	if ((sock2 = socket(AF_INET, SOCK_STREAM, 0)) < 0)
//			return;
//
//	addressW.sin_family = AF_INET;
//	addressW.sin_port = htons(write_port1);
//	addressW.sin_addr.s_addr = INADDR_ANY;
//
//	if (bind(sock2, (struct sockaddr *)&addressW, sizeof (addressW)) < 0)
//		return;
//
//	listen(sock2, 0);
//
//	xil_printf("Waiting User 2 to connect... writing side\r\n");
//


	memset(recv_buf, '\0', BUFSIZE);
	memset(send_buf, '\0', BUFSIZE);

	while (1) {

		xil_printf("\r\nWaiting message %d", i);
		/* read a max of RECV_BUF_SIZE bytes from socket */
		while ((nr = lwip_read(sock1, recv_buf, BUFSIZE)) <= 0) {
			//xil_printf("%s: error reading from socket %d, closing socket\r\n", __FUNCTION__, sd1);
			//break;
		}

		/* Print messages */
		if (nr > 0) {
			xil_printf("\r\nUser 2: %s\r\n", recv_buf);
		}

		xil_printf("Now you can send your message\r\n");

		// Sending message
		xil_printf("Me: ");
		if(fgets(send_buf, BUFSIZE, stdin) != NULL) {
			if ((nw = lwip_write(sd1, send_buf, BUFSIZE)) < 0) {
				xil_printf("Error sending to socket %d\r\n", sd1);
			}
		}
		else {
			printf("Error fgets!\r\n");
		}

		i++;
		memset(recv_buf, '\0', BUFSIZE);
		memset(send_buf, '\0', BUFSIZE);

	}

	close(sock1);
	close(sock2);
}
